Oops in Java ?
     - Object means a real-world entity such as a pen, chair, table, computer, watch, etc. Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:
          Object
          Class
          Inheritance
          Polymorphism
          Abstraction
         Encapsulation
     - Apart from these concepts, there are some other terms which are used in Object-Oriented design:
          Coupling
          Cohesion
          Association
          Aggregation
          Composition

objects in Oops ?
     - An Object can be defined as an instance of a class
     - object contains an address and takes up some space in memory

Class in Oops ?
     - Collection of objects is called class. It is a logical entity.
     - A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space.

Inheritance in OOPS ?
     - When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. 
     - It is used to achieve runtime polymorphism.

Polymorphism in OOPS ?
     - If one task is performed in different ways, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.
     - In Java, we use method overloading and method overriding to achieve polymorphism.
     - Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.

Abstraction in OOPS ?
     - Hiding internal details and showing functionality is known as abstraction. For example phone call, we don't know the internal processing.
     - In Java, we use abstract class and interface to achieve abstraction.

Encapsulation in OOPS ?
     - Binding (or wrapping) code and data together into a single unit are known as encapsulation. For example, a capsule, it is wrapped with different medicines.
     - A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.

Coupling
     - Coupling refers to the knowledge or information or dependency of another class. 
     - It arises when classes are aware of each other.
     -  If a class has the details information of another class, there is strong coupling. 
     - In Java, we use private, protected, and public modifiers to display the visibility level of a class, method, and field. You can use interfaces for the weaker coupling because there is no concrete implementation.

Cohesion
     - Cohesion refers to the level of a component which performs a single well-defined task. 
     - A single well-defined task is done by a highly cohesive method. The weakly cohesive method will split the task into separate parts.
     - The java.io package is a highly cohesive package because it has I/O related classes and interface. However, the java.util package is a weakly cohesive package because it has unrelated classes and interfaces.

Association
     - Association represents the relationship between the objects. Here, one object can be associated with one object or many objects. There can be four types of association between the objects:

     One to One
     One to Many
     Many to One, and
     Many to Many
     Let's understand the relationship with real-time examples. For example, One country can have one prime minister (one to one), and a prime minister can have many ministers (one to many). Also, many MP's can have one prime minister (many to one), and many ministers can have many departments (many to many).

     Association can be undirectional or bidirectional.

Aggregation
     - Aggregation is a way to achieve Association. Aggregation represents the relationship where one object contains other objects as a part of its state. It represents the weak relationship between objects. It is also termed as a has-a relationship in Java. Like, inheritance represents the is-a relationship. It is another way to reuse objects.

Composition
     - The composition is also a way to achieve Association. The composition represents the relationship where one object contains other objects as a part of its state. There is a strong relationship between the containing object and the dependent object. It is the state where containing objects do not have an independent existence. If you delete the parent object, all the child objects will be deleted automatically.

What is the difference between an object-oriented programming language and object-based programming language?
     - Object-based programming language follows all the features of OOPs except Inheritance. JavaScript and VBScript are examples of object-based programming languages.


Naming conventions in java ?
     CamelCase in java naming conventions
     Java follows camel-case syntax for naming the class, interface, method, and variable.
     Class:
          - It should start with the uppercase letter.
          - It should be a noun such as Color, Button, System, Thread, etc.
          - Use appropriate words, instead of acronyms.
     Interface:
          - It should start with the uppercase letter.
          - It should be an adjective such as Runnable, Remote, ActionListener.
          - Use appropriate words, instead of acronyms.
     Method:
          - It should start with lowercase letter.
          - It should be a verb such as main(), print(), println().
          - If the name contains multiple words, start it with a lowercase letter followed by an uppercase letter such as actionPerformed().
     Constant:
          - It should be in uppercase letters such as RED, YELLOW.
          - If the name contains multiple words, it should be separated by an underscore(_) such as MAX_PRIORITY.
          - It may contain digits but not as the first letter.
